// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  PARENT
  STUDENT
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model Account {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.String
  access_token      String?   @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.String
  session_state     String?
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime @db.Date
  sid       String
  data      String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model User {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  email      String       @unique
  fullname   String?
  phone      String?
  password   String
  role       Role         @default(PARENT)
  children   Student[]
  age        Int?
  gender     String?
  image      String?
  address    String?
  salary     Float?
  education  Education[] // teachers Education
  experience Experience[] // teachers Experience
  session    Session[]
  account    Account[]
  classes    Class[]
  subjects   Subject[]
  courses    Course[]
  createdAt  DateTime?    @default(now())
  updatedAt  DateTime?    @updatedAt
}

model Student {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  grade     Int?
  payments  Payment[]
  classId   String    @db.ObjectId
  class     Class     @relation(fields: [classId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Payment {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  signatureId String
  status      PaymentStatus @default(PENDING)
  studentId   String        @db.ObjectId
  student     Student       @relation(fields: [studentId], references: [id])
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt
}

model Class {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  students  Student[]
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Subject {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  userId    String?   @db.ObjectId
  createdBy User?     @relation(fields: [userId], references: [id])
  courses   Course[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Course {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  instructor  String
  duration    Int?
  level       Level?
  tags        String[]
  chapters    Chapter[]
  thumbnail   String
  grade       Grade[]
  exams       Exam[]
  subjectId   String    @db.ObjectId
  subject     Subject   @relation(fields: [subjectId], references: [id])
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  price       Float     @default(0)
}

model Chapter {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  duration    Int?
  content     Content[]
  course      Course    @relation(fields: [courseId], references: [id])
  courseId    String    @db.ObjectId
}

model Content {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  type      ContentType
  title     String
  data      Json
  chapter   Chapter     @relation(fields: [chapterId], references: [id])
  chapterId String      @db.ObjectId
}

enum Level {
  beginner
  intermediate
  advanced
}

enum ContentType {
  video
  text
  quiz
  image
}

model Exam {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  dueDate  DateTime
  courseId String   @db.ObjectId
  course   Course   @relation(fields: [courseId], references: [id])
  grade    Grade[]
}

model Grade {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  score    Int
  courseId String? @db.ObjectId
  examId   String? @db.ObjectId
  course   Course? @relation(fields: [courseId], references: [id])
  exam     Exam?   @relation(fields: [examId], references: [id])
}

model Education {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  school    String
  degree    String
  image     String?
  field     String
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  from      DateTime
  to        DateTime
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Experience {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  company     String
  position    String
  certificate String?
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  from        DateTime
  to          DateTime
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

// npx prisma generate
// npx prisma db push
